In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In function 'void tiny_cnn::parallel_for(int, int, const Func&, int)':
../tiny_cnn/util/util.h:226:25: error: 'std::thread' has not been declared
     int nthreads = std::thread::hardware_concurrency();
                         ^
../tiny_cnn/util/util.h:249:15: error: invalid use of incomplete type 'class std::future<void>'
         future.wait();
               ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/optimizers/optimizer.h:86:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]'
../tiny_cnn/optimizers/optimizer.h:110:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]'
../tiny_cnn/optimizers/optimizer.h:140:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]'
../tiny_cnn/optimizers/optimizer.h:165:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]'
../tiny_cnn/optimizers/optimizer.h:190:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]'
../tiny_cnn/network.h:848:10:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\vector:64:0,
                 from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\random.h:34,
                 from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\random:50,
                 from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_algo.h:65,
                 from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\algorithm:62,
                 from ../tiny_cnn/network.h:30,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_vector.h: In instantiation of 'std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = std::future<void>; _Alloc = std::allocator<std::future<void> >]':
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_vector.h:249:15:   required from 'std::vector<_Tp, _Alloc>::vector() [with _Tp = std::future<void>; _Alloc = std::allocator<std::future<void> >]'
../tiny_cnn/util/util.h:231:36:   required from 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]'
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/optimizers/optimizer.h:86:10:   required from here
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_vector.h:161:9: error: invalid use of incomplete type 'class std::future<void>'
         - this->_M_impl._M_start); }
         ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\memory:64:0,
                 from main.cpp:28:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_construct.h: In instantiation of 'void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::future<void>*]':
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_construct.h:151:31:   required from 'void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::future<void>*; _Tp = std::future<void>]'
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_vector.h:416:30:   required from 'std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::future<void>; _Alloc = std::allocator<std::future<void> >]'
../tiny_cnn/util/util.h:231:36:   required from 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]'
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]'
../tiny_cnn/optimizers/optimizer.h:86:10:   required from here
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\bits\stl_construct.h:127:27: error: invalid use of incomplete type '_Value_type {aka class std::future<void>}'
  __destroy(__first, __last);
                           ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of '_Value_type {aka class std::future<void>}'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]'
../tiny_cnn/network.h:719:14:   required from 'void tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:619:18:   required from 'void tiny_cnn::network<NetType>::train_once(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:589:27:   required from 'bool tiny_cnn::network<NetType>::fit(Optimizer&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; OnBatchEnumerate = sample1_convnet(const string&)::__lambda50; OnEpochEnumerate = sample1_convnet(const string&)::__lambda49; NetType = tiny_cnn::sequential; size_t = unsigned int]'
../tiny_cnn/network.h:226:19:   required from 'bool tiny_cnn::network<NetType>::train(Optimizer&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&, const std::vector<unsigned int>&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; OnBatchEnumerate = sample1_convnet(const string&)::__lambda50; OnEpochEnumerate = sample1_convnet(const string&)::__lambda49; NetType = tiny_cnn::sequential; size_t = unsigned int]'
main.cpp:123:120:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]'
../tiny_cnn/network.h:655:13:   required from 'void tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:622:27:   required from 'void tiny_cnn::network<NetType>::train_once(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:589:27:   required from 'bool tiny_cnn::network<NetType>::fit(Optimizer&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; OnBatchEnumerate = sample1_convnet(const string&)::__lambda50; OnEpochEnumerate = sample1_convnet(const string&)::__lambda49; NetType = tiny_cnn::sequential; size_t = unsigned int]'
../tiny_cnn/network.h:226:19:   required from 'bool tiny_cnn::network<NetType>::train(Optimizer&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&, const std::vector<unsigned int>&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; OnBatchEnumerate = sample1_convnet(const string&)::__lambda50; OnEpochEnumerate = sample1_convnet(const string&)::__lambda49; NetType = tiny_cnn::sequential; size_t = unsigned int]'
main.cpp:123:120:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]':
../tiny_cnn/util/util.h:272:74:   required from 'void tiny_cnn::for_(std::false_type, bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1; std::false_type = std::integral_constant<bool, false>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]'
../tiny_cnn/network.h:655:13:   required from 'void tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:622:27:   required from 'void tiny_cnn::network<NetType>::train_once(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]'
../tiny_cnn/network.h:589:27:   required from 'bool tiny_cnn::network<NetType>::fit(Optimizer&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; OnBatchEnumerate = sample2_mlp()::__lambda52; OnEpochEnumerate = sample2_mlp()::__lambda51; NetType = tiny_cnn::sequential; size_t = unsigned int]'
../tiny_cnn/network.h:226:19:   required from 'bool tiny_cnn::network<NetType>::train(Optimizer&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&, const std::vector<unsigned int>&, size_t, int, OnBatchEnumerate, OnEpochEnumerate, bool, int, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >&) [with Error = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; OnBatchEnumerate = sample2_mlp()::__lambda52; OnEpochEnumerate = sample2_mlp()::__lambda51; NetType = tiny_cnn::sequential; size_t = unsigned int]'
main.cpp:184:102:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda31]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda31; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda31]'
../tiny_cnn/layers/fully_connected_layer.h:130:10:   required from 'void tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda34]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda34; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda34]'
../tiny_cnn/layers/partial_connected_layer.h:138:10:   required from 'void tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda35]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda35; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda35]'
../tiny_cnn/layers/partial_connected_layer.h:150:10:   required from 'void tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]'
../tiny_cnn/layers/linear_layer.h:71:10:   required from 'void tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]'
../tiny_cnn/layers/linear_layer.h:74:10:   required from 'void tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]'
../tiny_cnn/layers/linear_layer.h:92:10:   required from 'void tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]'
../tiny_cnn/layers/fully_connected_layer.h:91:10:   required from 'void tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]'
../tiny_cnn/layers/fully_connected_layer.h:95:10:   required from 'void tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]'
../tiny_cnn/layers/partial_connected_layer.h:105:10:   required from 'void tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]'
../tiny_cnn/layers/partial_connected_layer.h:109:10:   required from 'void tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]'
../tiny_cnn/layers/convolutional_layer.h:264:10:   required from 'void tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]'
../tiny_cnn/layers/convolutional_layer.h:268:10:   required from 'void tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]'
../tiny_cnn/layers/convolutional_layer.h:321:10:   required from 'void tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
In file included from ../tiny_cnn/nodes.h:32:0,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
../tiny_cnn/util/util.h: In instantiation of 'void tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]::__lambda1]':
../tiny_cnn/util/util.h:265:74:   required from 'void tiny_cnn::for_(std::true_type, bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]::__lambda1; std::true_type = std::integral_constant<bool, true>]'
../tiny_cnn/util/util.h:279:85:   required from 'void tiny_cnn::for_(bool, int, T, Func, int) [with T = unsigned int; Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]::__lambda1]'
../tiny_cnn/util/util.h:291:17:   required from 'void tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]'
../tiny_cnn/util/util.h:296:35:   required from 'void tiny_cnn::for_i(T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]'
../tiny_cnn/layers/convolutional_layer.h:342:10:   required from 'void tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]'
main.cpp:387:1:   required from here
../tiny_cnn/util/util.h:240:10: error: invalid use of incomplete type 'class std::future<void>'
         })));
          ^
In file included from ../tiny_cnn/util/util.h:52:0,
                 from ../tiny_cnn/nodes.h:32,
                 from ../tiny_cnn/network.h:36,
                 from ../tiny_cnn/tiny_cnn.h:30,
                 from main.cpp:29:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:113:11: error: declaration of 'class std::future<void>'
     class future;
           ^
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future: At global scope:
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adagrad::update(const vec_t&, tiny_cnn::vec_t&)::__lambda3]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
     async(launch __policy, _Fn&& __fn, _Args&&... __args);
     ^
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::RMSprop::update(const vec_t&, tiny_cnn::vec_t&)::__lambda4]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::adam::update(const vec_t&, tiny_cnn::vec_t&)::__lambda5]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::gradient_descent::update(const vec_t&, tiny_cnn::vec_t&)::__lambda6]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::momentum::update(const vec_t&, tiny_cnn::vec_t&)::__lambda7]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::image2vec(const float_t*, unsigned int, unsigned int, unsigned int, unsigned int)::__lambda22]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::network<NetType>::bprop(const tensor_t&, const tensor_t&, int, const tensor_t*) [with E = tiny_cnn::mse; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda21]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::adagrad; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = int; Func = tiny_cnn::network<NetType>::train_onebatch(Optimizer&, const tensor_t*, const tensor_t*, int, int, const tensor_t*) [with E = tiny_cnn::mse; Optimizer = tiny_cnn::gradient_descent; NetType = tiny_cnn::sequential; tiny_cnn::tensor_t = std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> > >]::__lambda20]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda31]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::fully_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda31]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda34]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda34]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda35]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::partial_connected_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda35]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda39]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda40]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::linear_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::relu; tiny_cnn::cnn_size_t = unsigned int]::__lambda41]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda29]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::fully_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda30]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda32]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::partial_connected_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda33]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda24]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::forward_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda26]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda27]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
c:\mingw\lib\gcc\mingw32\4.8.1\include\c++\future:171:5: error: 'std::future<typename std::result_of<_Functor(_ArgTypes ...)>::type> std::async(std::launch, _Fn&&, _Args&& ...) [with _Fn = tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]::__lambda1]::__lambda0; _Args = {}; typename std::result_of<_Functor(_ArgTypes ...)>::type = void]', declared using local type 'tiny_cnn::parallel_for(int, int, const Func&, int) [with Func = tiny_cnn::for_i(bool, T, Func, int) [with T = unsigned int; Func = tiny_cnn::convolutional_layer<Activation>::back_propagation(tiny_cnn::cnn_size_t, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, const std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&, std::vector<std::vector<double, tiny_cnn::aligned_allocator<double, 64u> >*>&) [with Activation = tiny_cnn::activation::tan_h; tiny_cnn::cnn_size_t = unsigned int]::__lambda28]::__lambda1]::__lambda0', is used but never defined [-fpermissive]
